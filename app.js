// Generated by CoffeeScript 1.8.0
(function() {
  var UdpGun, async, backbone, colors, env, fs, gun, helpers, initialize, loadPlugins, os, plugin, settings, startPlugins, _;

  _ = require('underscore');

  async = require('async');

  fs = require('fs');

  helpers = require('helpers');

  backbone = require('backbone4000');

  colors = require('colors');

  os = require('os');

  settings = {
    pluginDir: "/node_modules/",
    plugin: {},
    host: 'localhost',
    port: "6000",
    extendPacket: {
      type: 'probe',
      host: os.hostname()
    }
  };

  if (fs.existsSync('./settings.js')) {
    _.extend(settings, require('./settings').settings);
  }

  UdpGun = require('udp-client');

  gun = new UdpGun(settings.port, settings.host);

  env = {
    settings: settings
  };

  console.log('settings', settings);

  plugin = backbone.Model.extend4000({
    interval: 10000,
    start: function() {
      var wrap;
      wrap = (function(_this) {
        return function() {
          return _this.run(function(err, data) {
            return _this.feed(err, data);
          });
        };
      })(this);
      this.i = setInterval(wrap, this.interval);
      return wrap();
    },
    feed: function(err, data) {
      var packet;
      packet = _.extend({}, settings.extendPacket);
      packet[this.name] = data;
      console.log(colors.green(this.name), packet);
      return console.log(gun.send(new Buffer(JSON.stringify(packet))));
    },
    stop: function() {
      if (this.i) {
        stopInterval(this.i);
        return delete this.i;
      }
    }
  });

  loadPlugins = function(env, callback) {
    return fs.readdir(helpers.makePath(__dirname + settings.pluginDir), function(err, files) {
      if (err) {
        return helpers.cbc(err);
      }
      return async.parallel(helpers.dictFromArray(files, function(fileName) {
        return [
          fileName, function(callback) {
            var filePath, makePlugin, stats;
            if (fileName.indexOf('probe_plugin_') !== 0) {
              return callback();
            }
            filePath = helpers.makePath(__dirname + settings.pluginDir + fileName);
            stats = fs.lstatSync(filePath);
            makePlugin = function(callback) {
              var name, newPlugin;
              name = fileName.substr(13);
              newPlugin = plugin.extend4000({
                name: name,
                env: env
              }, require(filePath).plugin);
              newPlugin.prototype.settings = _.extend(newPlugin.prototype.settings || {}, settings.plugin[name]);
              return callback(null, newPlugin);
            };
            if (stats.isDirectory() || stats.isSymbolicLink()) {
              return makePlugin(callback);
            } else {
              return callback();
            }
          }
        ];
      }), function(err, data) {
        env.plugins = helpers.dictMap(data, function(val, key) {
          return val;
        });
        return helpers.cbc(callback, err, data);
      });
    });
  };

  startPlugins = function(env, callback) {
    helpers.dictMap(env.plugins, function(plugin, name) {
      var instance;
      instance = new plugin();
      return instance.start();
    });
    return helpers.cbc(callback);
  };

  initialize = function(env, callback) {
    return async.series([
      function(callback) {
        return loadPlugins(env, callback);
      }, function(callback) {
        return startPlugins(env, callback);
      }
    ], function(err, data) {
      return helpers.cbc(callback, err, data);
    });
  };

  initialize(env);

}).call(this);
